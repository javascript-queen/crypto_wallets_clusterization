import matplotlib
from matplotlib import font_manager

# Clear and rebuild the font cache
font_manager._rebuild()
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import plotly.express as px

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
@st.cache_data
def load_data():
    file_url = "http://95.169.204.69:8092/csv/0xc18360217d8f7ab5e7c516566761ea12ce7f9d72/0xc18360217d8f7ab5e7c516566761ea12ce7f9d72.csv"
    df = pd.read_csv(file_url)
    df['value'] = df['value'].astype(float)
    df['ts'] = pd.to_datetime(df['ts'])
    return df

df = load_data()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data_features():
    file_id = "1ozjVKd5Vcca2yXcCRC0TYVQKT2s320ne"
    file_url_2 = f"https://drive.google.com/uc?id={file_id}"
    df = pd.read_csv(file_url_2)
    return df

df_features = load_data_features()

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
wallet_balances = {}
wallet_tx_counts = {}
wallet_tx_volumes = {}

for _, row in df.iterrows():
    from_wallet = row['from_address']
    to_wallet = row['to_address']
    value = row['value']

    wallet_balances[from_wallet] = wallet_balances.get(from_wallet, 0) - value
    wallet_balances[to_wallet] = wallet_balances.get(to_wallet, 0) + value
    
    wallet_tx_counts[from_wallet] = wallet_tx_counts.get(from_wallet, 0) + 1
    wallet_tx_counts[to_wallet] = wallet_tx_counts.get(to_wallet, 0) + 1
    
    wallet_tx_volumes[from_wallet] = wallet_tx_volumes.get(from_wallet, 0) + value
    wallet_tx_volumes[to_wallet] = wallet_tx_volumes.get(to_wallet, 0) + value

wallets = list(wallet_balances.keys())
balances = np.array([wallet_balances[w] for w in wallets])
tx_counts = np.array([wallet_tx_counts.get(w, 0) for w in wallets])
tx_volumes = np.array([wallet_tx_volumes.get(w, 0) for w in wallets])

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üìä –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫—á–µ–π–Ω-–∫–æ—à–µ–ª—å–∫–æ–≤")
st.subheader("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤")

# –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏
wallet_address = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", wallets)

if wallet_address:
    wallet_df = df[(df['from_address'] == wallet_address) | (df['to_address'] == wallet_address)]
    
    if not wallet_df.empty:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        latest_balance = wallet_balances.get(wallet_address, 0)
        latest_price = wallet_df.iloc[-1]['price'] if 'price' in wallet_df.columns else 0
        latest_value = latest_balance * latest_price
        
        st.metric("üîç –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç", f"{latest_balance:.2f}")
        st.metric("üîç –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã", f"{latest_price:.2f}")
        st.metric("üîç –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –≤–∞–ª—é—Ç–µ", f"{latest_value:.2f}")
st.markdown("---")
# –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –æ–±—ä–µ–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
st.subheader("2. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ (—É—á–µ—Ç –æ–±—ä–µ–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
st.markdown("""
### –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∏—Ç–æ–≤, –º–∞—Ä–∫–µ—Ç–º–µ–π–∫–µ—Ä–æ–≤ –∏ —Ç–æ–ª–ø—ã

**1.–ö–∏—Ç—ã:**
- –ö—Ä—É–ø–Ω—ã–µ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- –ù–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞
- –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —á–∏—Å—Ç—ã–π –ø–æ—Ç–æ–∫

**2.–ú–∞—Ä–∫–µ—Ç–º–µ–π–∫–µ—Ä—ã:**
- –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞
- –ù–µ–±–æ–ª—å—à–∏–µ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏

**3.–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
- –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏

**–ú–æ–¥–µ–ª—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:**
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º K-Means —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö. –ì—Ä—É–ø–ø—ã –≤—ã—è–≤–ª—è—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –æ–±—ä–µ–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
""")
st.image("kmeans.png", caption="–ú–µ—Ö–∞–Ω–∏–∑–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏", use_container_width=True)
st.markdown("---")
st.subheader("3. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
colors = {"whale": "orange", "market_maker": "coral", "other": "gray"}
fig = px.scatter(df_features, x="total_volume", y="total_count", color="role",
                title="–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤", color_discrete_map=colors)
st.plotly_chart(fig)

# –°—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
role_counts = df_features["role"].value_counts(normalize=True) * 100
fig_bar = px.bar(role_counts, x=role_counts.index, y=role_counts.values,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ (–≤ %)", labels={"x": "–ì—Ä—É–ø–ø–∞", "y": "–ü—Ä–æ—Ü–µ–Ω—Ç –∞–¥—Ä–µ—Å–æ–≤ (%)"},
                color=role_counts.index, color_discrete_map=colors)
fig_bar.update_layout(yaxis=dict(showgrid=True, gridcolor="lightgray", gridwidth=0.5))
st.plotly_chart(fig_bar)

# –°—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π —à–∫–∞–ª–æ–π
role_counts_log = df_features["role"].value_counts()
fig_bar_log = px.bar(role_counts_log, x=role_counts_log.index, y=role_counts_log.values,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)", labels={"x": "–ì—Ä—É–ø–ø–∞", "y": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤"},
                    color=role_counts_log.index, color_discrete_map=colors)
fig_bar_log.update_layout(yaxis_type="log", yaxis=dict(showgrid=True, gridcolor="lightgray", gridwidth=0.5))
st.plotly_chart(fig_bar_log)

st.write(df_features["role"].value_counts())
